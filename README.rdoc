= Positionable

<b>Positionable</b> is a library which provides contiguous positionning capabilities to your ActiveRecord models.

For more functionalities, you could also have a look at acts_as_list[https://github.com/swanandp/acts_as_list].

== Installation

Edit your Gemfile, and simply add the following line:

  gem 'positionable', :git => "git://github.com/pguegan/positionable.git" 

== Getting Started

Let's say you want to make the model +Item+ positionable.

=== Create a migration

First, create a migration to add the column +position+ to the table +items+:

  rails generate migration add_position_to_items position:integer

Then, run the migration:

  rake db:migrate

=== Setup your model

Simply add the +is_positionable+ method in your ActiveRecord model:

  class Item < ActiveRecord::Base
    is_positionable
  end

==== Grouping records

Maybe your items are grouped (typically with a +belongs_to+ association). In this case, you'll want to restrict the position in each group by declaring the +:group+ option:

  class Item < ActiveRecord::Base
    belongs_to :folder
    is_positionable :group => :folder
  end

==== Start position

By default, position starts by zero. But you may want to change this at the model level, for instance by starting at one (which seems more natural for some people):

  class Item < ActiveRecord::Base
    is_positionable :start => 1
  end

==== Ordering

When a new record is created, it is inserted by default at the last (highest) position of its group. Thus, when record are listed, the newly created record will appear at the bottom.

It is possible to change this behaviour by setting the +order+ option as follows:

  class Item < ActiveRecord::Base
    is_positionable :order => :desc
  end

This way, records are always listed by descending positions order. Record that have the highest position will appears at the top.

<b>Caution!</b> The semantic of +next+ or +previous+ methods remain unchanged. More precisely, even if the highest position matches with the <em>first</em> returned record, it is still considered as the <em>last</em> one. This is odd, so the semantic of some methods will certainly be modified in a further version.

== Usage

You can change the position of your items:

  item = Item.create(...) # The newly created item is set at the last position
  item.up! # Item's position is decremented by one
  item.down! # Item's position is incremented by one

You can also get the previous or next sibbling items:

  previous = item.previous
  all_previous = item.all_previous
  next = item.next
  all_next = item.all_next

Both first and last items can be caracterized like this:

  item.first? # True if item.previous is nil
  item.last? # True if item.next is nil